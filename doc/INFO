 Repository handling
 --------------------
 
 # show overview of files differing between master and linux_sim branches
git diff --compact-summary master linux_sim
 
 # show differences for a file between branches
git diff origin/master origin/linux_sim -- src/global.h

 # show the recent commits
git log --reverse --since="Feb 6 2022" --source

 # pull one file from a different branch
git checkout linux_sim src/logger.h

 # apply one commit from another branch
git checkout <branch to apply to>
git cherry-pick <commitSha>


 Get dependency information within the source tree
 -------------------------------------------------
gcc -M -nostdinc -isystem /dev/null core/HardwareSerial.cpp 2> /dev/null


 Display
 -------

Display is driven via SPI, connected to
    9 ... DC,
    10 ... CS,   PIN_SPI_SS
    11 ... MOSI, PIN_SPI_MOSI
    13 ... SCL,  PIN_SPI_SCK
clearing the display takes 282ms ?!
    96*64*16 = 98 kbit -> 350 kHz transmission
A) one should use the hardware acceleration instead (draw rectangle command #22h)
B) the teensy provides a FIFO for hardware SPI connction
        we'd have to check if the display is ready before next write
        FlexSPI TX FIFO 16 * 64 Bits -> one character bitmap (6*8*16 bit)
C) the SSD1331 is capable of 150nS cycle time on the SPI interface
        -> 6.6 MHz, 465 µs / character bitmap
=> the display module should write characters one-by-one



 LoRa modem
 -----------
 EBYTE e220-900t22d

normal operation M0=M1=0, config mode M0=M1=1 (wire with one common GPIO pin, could be RTS)
    M0, M1 have an internal pull-up resitor, they are read as high when not connected -> config mode
    => pin 22
    
read AUX with GPIO pin (detect start-up sequence) (could use CTS)
    low during startup, pulled high when normal oeration is reached
    low during init (when leaving config mode), pulled high when normal oeration is reached
    low during transmition, pulled high when block is fully sent
    low 2m before received data is sent over TXD, pulled high when block is fully sent
    => pin 23

configuration is persistent -> module can be used without GPIO pins connected

setup with 9600, 8N1 (default)

#00h/#01h   default(0000)   module address, set 0xFFFF for broadcast
#02h        default(62)     data rate 0b11100100=0x64  modem 9600,8N1 air=9600bps
                            data rate 0b11100100=0xE4  modem 115200,8N1 air=9600bps
                            default 9600,8N1 air=2.4k
#03h        default(00)     packet size 200 byte, RSSI noise disabled, 22dBm transmit power
#04h        default(17)     channel control (0..81) 850.125MHz+CH*1MHz  ch17=867.125MHz
#05h                        config RSSI byte disabled, transparent transmission mode
                            LBT disabled, LBT 500ms monitoring time 
#06h/#07h                   2 byte encryption key

factory default parameter：[c0] 00 00 62 00 17
Command :   SetRegister : C0+startingaddress+length+parameters
            ReadRegister: C1+startingaddress+parameters
            SetTemporaryRegister : C2+startingaddress+parameters
Response C1 + ... : WrongFormat -> FF FF FF

my present configuration:
    mode = 0xE4 : 115200,8N1 air rate 9.6k
    freq = 0x12 : ch18 = 868.125 MHz
    RSSI = 0x80 : RSSI enabled
    command : 0xC0 0x00 0x06 0x00 0x00 0xE4 0x00 0x12 0x80

USB stick (black=GND, red=+5V, white=RXD, green=TXD) : cross-cable RXD/TXD with modem



 CPU details
 -----------
 
DWT - data watchpoint and trace unit
    The DWT if present contains counters for Clock cycles, CYCCNT.
    0xE0001000 - DWT_CTRL - Control Register
    0xE0001004 - DWT_CYCCNT - Cycle Count Register
    DWT registers are described in the Arm®v7-M Architecture Reference Manual.
    ARM_DWT_CYCCNT is a 32-bit unsigned counter for processor cycles (600 MHz), defined in imxrt.h

Interrupts:
    0 = highest priority, 255 = lowest
    core/startup.c:
        for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
        for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
    core/imxrt.h:
        attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    kernel.cpp:
        _VectorsRam[15] = &FC_systick_isr;
    hardware serial : PRIORITY=64
        Serial1 : IRQ_LPUART6 = 25 (+16) 



 testing with USB serial
 -----------------------

# for modem
minicom -D /dev/ttyACM0 -b 9600
# for USB serial
minicom -D /dev/ttyACM0 -b 115200

