 Repository handling
 --------------------
 
 # show overview of files differing between master and linux_sim branches
git diff --compact-summary master linux_sim
 
 # show differences for a file between branches
git diff origin/master origin/linux_sim -- src/global.h

 # show the recent commits
git log --reverse --since="Feb 6 2022" --source

 # pull one file from a different branch
git checkout linux_sim src/logger.h

 # apply one commit from another branch
git checkout <branch to apply to>
git cherry-pick <commitSha>

 Hardware
 --------
 
Display is driven via SPI, connected to
    9 ... DC,
    10 ... CS,   PIN_SPI_SS
    11 ... MOSI, PIN_SPI_MOSI
    13 ... SCL,  PIN_SPI_SCK
 
 
 
 Software architecture
 ---------------------
 
 
 

 
 files in build
 --------------
 
usb_seremu.c
usb_desc.c
usb_mtp.c
sm_realloc_move.c
eeprom.c
sm_zalloc.c
sm_calloc.c
usb_serial3.c
usb_serial2.c
sm_hash.c

debugprintf.c
sm_realloc_i.c
digital.c
pwm.c
sm_alloc_valid.c
interrupt.c
bootdata.c
tempmon.c
sm_malloc_stats.c
rtc.c

sm_free.c
nonstd.c
sm_pool.c
analog.c
extmem.c
delay.c
sm_szalloc.c
sm_malloc.c
usb.c
fuse.c

sm_realloc.c
clockspeed.c
usb_serial.c
startup.c
sm_util.c
HardwareSerial.cpp
new.cpp
WString.cpp
HardwareSerial3.cpp
serialEvent6.cpp

serialEvent3.cpp
serialEvent1.cpp
HardwareSerial1.cpp
serialEventUSB1.cpp
serialEvent7.cpp
serialEvent8.cpp
serialEventUSB2.cpp
Print.cpp
usb_inst.cpp
HardwareSerial4.cpp

HardwareSerial7.cpp
HardwareSerial2.cpp
EventResponder.cpp
serialEvent2.cpp
serialEvent5.cpp
IntervalTimer.cpp
HardwareSerial8.cpp
serialEvent4.cpp
Stream.cpp
yield.cpp

WMath.cpp
main.cpp
CrashReport.cpp
Time.cpp
HardwareSerial5.cpp
HardwareSerial6.cpp
serialEvent.cpp


CPU details
-----------
DWT - data watchpoint and trace unit
    The DWT if present contains counters for Clock cycles, CYCCNT.
    0xE0001000 - DWT_CTRL - Control Register
    0xE0001004 - DWT_CYCCNT - Cycle Count Register
    DWT registers are described in the ArmÂ®v7-M Architecture Reference Manual.
ARM_DWT_CYCCNT is a 32-bit unsigned counter for processor cycles (600 MHz), defined in imxrt.h

testing
-----------
minicom -D /dev/ttyACM0 -b 9600
